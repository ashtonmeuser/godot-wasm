from utils import download_wasmer

# Import env and create module-specific clone
Import("env")
module_env = env.Clone()

# Download Wasmer if required
download_wasmer(env)

# Check platform specifics
if env["platform"] in ["linux", "linuxbsd"]:
    env["LIBWASMERSUFFIX"] = ".a"
    module_env.Append(CXXFLAGS=["-std=c++17"])
elif env["platform"] in ["osx", "macos"]:
    env["LIBWASMERSUFFIX"] = ".a"
    module_env.Append(CXXFLAGS=["-std=c++17"])
    env.Append(LINKFLAGS=["-framework", "Security"])
elif env["platform"] == "windows":
    env["LIBWASMERSUFFIX"] = ".dll.lib"
    if env.get("use_mingw"):
        env["LIBWASMERSUFFIX"] = ".a"
        env.Append(LIBS=["userenv"])

# Explicit static libraries
wasmer_lib = env.File("wasmer/lib/{}wasmer{}".format(env["LIBPREFIX"], env.get("LIBWASMERSUFFIX", env["LIBSUFFIX"])))

# Linked libraries (global env) and includes (cloned env)
env.Append(LIBPATH=[env.Dir("wasmer/lib").abspath])
env.Append(LIBS=[wasmer_lib])
module_env.Append(CPPPATH=[env.Dir("wasmer/include").abspath])

# Defines for module agnosticism
module_env.Append(CPPDEFINES=["GODOT_MODULE"])

# Module sources
module_env.add_source_files(
    env.modules_sources, ["register_types.cpp", env.Glob("src/*.cpp", exclude="src/godot-library.cpp")]
)
